-- A function to get the total number of employees in a specific department:

DELIMITER //
CREATE FUNCTION TotalEmployeesInDepartment(dept_id INT) 
RETURNS INT DETERMINISTIC READS SQL DATA
BEGIN
  DECLARE total INT;
  SELECT COUNT(*) INTO total
  FROM employees
  WHERE department_id = dept_id;
  RETURN total;
END //
DELIMITER ;

-- Store function output in a variable
-- SET @totalEmployees = TotalEmployeesInDepartment(1);

-- Store function output in a table
-- INSERT INTO my_table (column_name)
-- VALUES (TotalEmployeesInDepartment(1));


-- A function to calculate the average rating of an employeeâ€™s performance evaluations:
DELIMITER //
CREATE FUNCTION AveragePerformanceRating(emp_id INT) 
RETURNS DECIMAL(3,2) DETERMINISTIC READS SQL DATA
BEGIN
  DECLARE avg_rating DECIMAL(3,2);
  SELECT AVG(rating) INTO avg_rating
  FROM performance_evaluations
  WHERE employee_id = emp_id;
  RETURN avg_rating;
END //
DELIMITER ;

-- Store function output in a variable
-- SET @avgPerfRate = AveragePerformanceRating(1);

-- Store function output in a table
-- INSERT INTO my_table (column_name)
-- VALUES (AveragePerformanceRating(1));

-- SELECT TotalEmployeesInDepartment(1);
-- SELECT AveragePerformanceRating(1);


DELIMITER //
CREATE FUNCTION Avg_Salary_Department(dept_name VARCHAR(255))
RETURNS FLOAT DETERMINISTIC READS SQL DATA
BEGIN
  DECLARE avg_salary FLOAT;
  SELECT AVG(e.salary) INTO avg_salary
  FROM employees e
  JOIN departments d ON e.department_id = d.id
  WHERE d.name = dept_name;
  RETURN avg_salary;
END //
DELIMITER ;


DELIMITER //
CREATE FUNCTION Total_Vacation_Days(emp_id INT)
RETURNS INT DETERMINISTIC READS SQL DATA
BEGIN
  DECLARE total_days INT;
  SELECT SUM(v.duration) INTO total_days
  FROM vacation_history v
  WHERE v.employee_id = emp_id;
  RETURN total_days;
END; //
DELIMITER ;
